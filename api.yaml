openapi: 3.0.3
info:
  title: Daniel Todo
  description: Todo example
  version: 1.0.0
servers:
  - url: https://prod1.weos.sh/blog/dev
    description: Test of Weos
  - url: https://prod1.weos.sh/blog/v1
  - url: http://localhost:8681
x-weos-config:
  event-source:
    - title: default
      driver: service
      endpoint: https://prod1.weos.sh/events/v1
    - title: event
      driver: sqlite3
      database: test.db
  databases:
    - title: default
      driver: sqlite3
      database: test.db
  database:
    driver: sqlite3
    database: test.db
  rest:
    middleware:
      - RequestID
      - Recover
      - ZapLogger
      - LogLevel
components:
  schemas:
    Todo:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        userId:
          type: integer
        lastUpdated:
          type: string
          format: date-time
          x-update:
            - Add Todo
            - Update Todo
        created:
          type: string
          format: date-time
          x-update:
            - Add Todo
      required:
        - title
        - description
        - userId
    # Did not get through with creating User todos
    # Tried filtering by userId from Todos but was unsuccessful
    User:
      type: object
      properties:
        username:
          type: string
        # todos:
        #   type: array
        #   items:
        #     $ref: "#/components/schemas/Todo"
      required:
        - username
paths:
  /:
    get:
      operationId: Homepage
      responses:
        200:
          description: Application Homepage
          content:
            text/html:
              example: |
                <html>
                  <head>
                      <title>Todo</title>
                  </head>
                  <body> 
                   This is a landing page for Todo Server 
                  </body>
                </html>
  /api/json:
    get:
      operationId: Get API Details
      x-controller: APIDiscovery
      responses:
        200:
          description: API Details
          content:
            application/json:
              schema:
                type: string
  /api/html:
    get:
      operationId: Get API Details
      x-controller: APIDiscovery
      responses:
        200:
          description: API Details
          content:
            application/html:
              schema:
                type: string

  # user routes
  # not used in todo application
  /users:
    post:
      operationId: Add User
      summary: Create User
      x-middleware:
        - Recover
        - ZapLogger
        - LogLevel
      requestBody:
        description: Username must be submitted
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: Add User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    get:
      operationId: Get Users
      summary: Get List of Users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: l
          x-alias: limit
          schema:
            type: integer
        - in: query
          name: filters
          schema:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                operator:
                  type: string
                values:
                  type: array
                  items:
                    type: string

          required: false
          description: query string
      responses:
        200:
          description: List of todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
  # user routes by id
  # not used in todo application
  /users/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: user id
        - in: query
          name: sequence_no
          schema:
            type: integer
        - in: query
          name: use_entity_id
          schema:
            type: boolean
          required: false
      summary: Get User by id
      operationId: Get User
      responses:
        200:
          description: User details without any supporting collections
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        304:
          description: Not modified
        400:
          description: Item doesn't exist

  # todo routes
  /todos:
    post:
      operationId: Add Todo
      summary: Create Todo
      x-middleware:
        - Recover
        - ZapLogger
        - LogLevel
      requestBody:
        description: Todo info that is submitted
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Todo"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Todo"
      responses:
        201:
          description: Add Todo to Aggregator
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
    get:
      operationId: Get Todos
      summary: Get List of Todos
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: l
          x-alias: limit
          schema:
            type: integer
        - in: query
          name: filters
          schema:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                operator:
                  type: string
                values:
                  type: array
                  items:
                    type: string

          required: false
          description: query string
      responses:
        200:
          description: List of todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Todo"

  /todos/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: todo id
        - in: query
          name: sequence_no
          schema:
            type: integer
        - in: query
          name: use_entity_id
          schema:
            type: boolean
          required: false
      summary: Get Todo by id
      operationId: Get Todo
      responses:
        200:
          description: Todo details without any supporting collections
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        304:
          description: Not modified
        400:
          description: Item doesn't exist

    put:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: todo id
        - in: header
          name: If-Match
          schema:
            type: string
          required: false
      summary: Update todo details
      operationId: Update Todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Todo"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Todo"
      responses:
        200:
          description: Update Todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        400:
          description: Request is malformed
        404:
          description: Item doesn't exist
        412:
          description: The item is stale
        422:
          description: Invalid content data sent

    delete:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: todo id
        - in: header
          name: If-Match
          schema:
            type: string
      requestBody:
        description: Todo info that is submitted
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
      summary: Delete todo
      operationId: Delete Todo
      responses:
        200:
          description: Todo Deleted
